Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> import pandas

>>> import pandas as pd
>>> obj = Series([4, 7, -5, 3])
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    obj = Series([4, 7, -5, 3])
NameError: name 'Series' is not defined
>>> from pandas import Series, DataFrame
>>> import pandas as pd
>>> obj = Series([4, 7, -5, 3])
>>> obj
0    4
1    7
2   -5
3    3
dtype: int64
>>> obj.values
array([ 4,  7, -5,  3], dtype=int64)
>>> obj.index
Int64Index([0, 1, 2, 3], dtype='int64')
>>> obj2 = Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])
>>> obj2
d    4
b    7
a   -5
c    3
dtype: int64
>>> obj2.index
Index(['d', 'b', 'a', 'c'], dtype='object')
>>> obj2['a']
-5
>>> obj2[obj2>0]
d    4
b    7
c    3
dtype: int64
>>> obj2*2
d     8
b    14
a   -10
c     6
dtype: int64
>>> np.exp(obj2)
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    np.exp(obj2)
NameError: name 'np' is not defined
>>> import numpy as np
>>> np.exp(obj2)
d      54.598150
b    1096.633158
a       0.006738
c      20.085537
dtype: float64
>>> 'b' in obj2
True
>>> 'e' in obj2
False
>>> sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}
>>> obj3 = Series(sdata)
>>> obj3
Ohio      35000
Oregon    16000
Texas     71000
Utah       5000
dtype: int64
>>> states = ['California', 'Ohio', 'Oregon', 'Texas']
>>> obj4 = Series(sdata,index=states)
>>> obj4
California      NaN
Ohio          35000
Oregon        16000
Texas         71000
dtype: float64
>>> pd.isnull(obj4)
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> pd.notnull(obj4)
California    False
Ohio           True
Oregon         True
Texas          True
dtype: bool
>>> obj4.isnull()
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> obj3 +obj4
California       NaN
Ohio           70000
Oregon         32000
Texas         142000
Utah             NaN
dtype: float64
>>> obj4.name = 'population'
>>> obj4.index.name = 'state'
>>> obj4
state
California      NaN
Ohio          35000
Oregon        16000
Texas         71000
Name: population, dtype: float64
>>> obj.index = ['Bob','Steve','Jeff','Ryan']
>>> obj
Bob      4
Steve    7
Jeff    -5
Ryan     3
dtype: int64
>>> data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'],
'year': [2000, 2001, 2002, 2001, 2002],
'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
>>> data.year
Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    data.year
AttributeError: 'dict' object has no attribute 'year'
>>> data.items()
dict_items([('pop', [1.5, 1.7, 3.6, 2.4, 2.9]), ('year', [2000, 2001, 2002, 2001, 2002]), ('state', ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'])])
>>> frame = DataFrame(data)
>>> frame
   pop   state  year
0  1.5    Ohio  2000
1  1.7    Ohio  2001
2  3.6    Ohio  2002
3  2.4  Nevada  2001
4  2.9  Nevada  2002
>>> DataFrame(data, columns=['year', 'state', 'pop'])
   year   state  pop
0  2000    Ohio  1.5
1  2001    Ohio  1.7
2  2002    Ohio  3.6
3  2001  Nevada  2.4
4  2002  Nevada  2.9
>>> frame2 = DataFrame(data, columns=['year', 'state', 'pop', 'debt'],index=['one', 'two', 'three', 'four', 'five'])
>>> frame2
       year   state  pop debt
one    2000    Ohio  1.5  NaN
two    2001    Ohio  1.7  NaN
three  2002    Ohio  3.6  NaN
four   2001  Nevada  2.4  NaN
five   2002  Nevada  2.9  NaN
>>> frame2['state']
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
Name: state, dtype: object
>>> frame2.year
one      2000
two      2001
three    2002
four     2001
five     2002
Name: year, dtype: int64
>>> frame2.columns
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> frame2.ix['three']
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object
>>> frame2['debt'] = 16.5
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5  16.5
two    2001    Ohio  1.7  16.5
three  2002    Ohio  3.6  16.5
four   2001  Nevada  2.4  16.5
five   2002  Nevada  2.9  16.5
>>> frame2['debt'] = np.arange(5.)
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5     0
two    2001    Ohio  1.7     1
three  2002    Ohio  3.6     2
four   2001  Nevada  2.4     3
five   2002  Nevada  2.9     4
>>> val = Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five'])
>>> frame2['debt'] = val
>>> val
two    -1.2
four   -1.5
five   -1.7
dtype: float64
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5   NaN
two    2001    Ohio  1.7  -1.2
three  2002    Ohio  3.6   NaN
four   2001  Nevada  2.4  -1.5
five   2002  Nevada  2.9  -1.7
>>> frame2['eastern'] = frame2.state=='Ohio'
>>> frame2
       year   state  pop  debt eastern
one    2000    Ohio  1.5   NaN    True
two    2001    Ohio  1.7  -1.2    True
three  2002    Ohio  3.6   NaN    True
four   2001  Nevada  2.4  -1.5   False
five   2002  Nevada  2.9  -1.7   False
>>> del frame2['eastern']
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5   NaN
two    2001    Ohio  1.7  -1.2
three  2002    Ohio  3.6   NaN
four   2001  Nevada  2.4  -1.5
five   2002  Nevada  2.9  -1.7
>>> pop = {'Nevada': {2001: 2.4, 2002: 2.9},'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}
>>> frame3 = DataFrame(pop)
>>> frame3
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   1.7
2002     2.9   3.6
>>> frame3.T
        2000  2001  2002
Nevada   NaN   2.4   2.9
Ohio     1.5   1.7   3.6
>>> DataFrame(pop,index = [2001,2002,2003])
      Nevada  Ohio
2001     2.4   1.7
2002     2.9   3.6
2003     NaN   NaN
>>> pdata = {'Ohio': frame3['Ohio'][:-1],'Nevada': frame3['Nevada'][:2]}
>>> DataFrame(pdata)
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   1.7
>>> frame3.index.name = 'year'; frame3.columns.name = 'state'
>>> frame3
state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   1.7
2002      2.9   3.6
>>> frame3.values
array([[ nan,  1.5],
       [ 2.4,  1.7],
       [ 2.9,  3.6]])
>>> frame3.keys
<bound method DataFrame.keys of state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   1.7
2002      2.9   3.6>
>>> frame3.values[0]
array([ nan,  1.5])
>>> obj = Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
>>> obj
a    0
b    1
c    2
d    3
dtype: float64
>>> obj['b']
1.0
>>> obj[1]
1.0
>>> obj[2:4]
c    2
d    3
dtype: float64
>>> obj[['b','a','d']]
b    1
a    0
d    3
dtype: float64
>>> obj['b','a','d']
Traceback (most recent call last):
  File "C:\Python34\lib\site-packages\pandas\core\index.py", line 1796, in get_value
    return tslib.get_value_box(s, key)
  File "pandas\tslib.pyx", line 753, in pandas.tslib.get_value_box (pandas\tslib.c:16375)
  File "pandas\tslib.pyx", line 762, in pandas.tslib.get_value_box (pandas\tslib.c:16043)
TypeError: 'tuple' object cannot be interpreted as an integer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    obj['b','a','d']
  File "C:\Python34\lib\site-packages\pandas\core\series.py", line 557, in __getitem__
    result = self.index.get_value(self, key)
  File "C:\Python34\lib\site-packages\pandas\core\index.py", line 1804, in get_value
    raise e1
  File "C:\Python34\lib\site-packages\pandas\core\index.py", line 1790, in get_value
    return self._engine.get_value(s, k)
  File "pandas\index.pyx", line 103, in pandas.index.IndexEngine.get_value (pandas\index.c:3204)
  File "pandas\index.pyx", line 111, in pandas.index.IndexEngine.get_value (pandas\index.c:2903)
  File "pandas\index.pyx", line 157, in pandas.index.IndexEngine.get_loc (pandas\index.c:3843)
  File "pandas\hashtable.pyx", line 668, in pandas.hashtable.PyObjectHashTable.get_item (pandas\hashtable.c:12265)
  File "pandas\hashtable.pyx", line 676, in pandas.hashtable.PyObjectHashTable.get_item (pandas\hashtable.c:12216)
KeyError: ('b', 'a', 'd')
>>> obj[[1, 3]]
b    1
d    3
dtype: float64
>>> obj[obj < 2]
a    0
b    1
dtype: float64
>>> obj['b':'c']
b    1
c    2
dtype: float64
>>> obj['b':'c'] = 5
>>> obj
a    0
b    5
c    5
d    3
dtype: float64
>>> data = DataFrame(np.arange(16).reshape((4, 4)),index=['Ohio', 'Colorado', 'Utah', 'New York'],
columns=['one', 'two', 'three', 'four'])
>>> data
          one  two  three  four
Ohio        0    1      2     3
Colorado    4    5      6     7
Utah        8    9     10    11
New York   12   13     14    15
>>> data['two']
Ohio         1
Colorado     5
Utah         9
New York    13
Name: two, dtype: int32
>>> data[['three','one']]
          three  one
Ohio          2    0
Colorado      6    4
Utah         10    8
New York     14   12
>>> data[:2]
          one  two  three  four
Ohio        0    1      2     3
Colorado    4    5      6     7
>>> data[data['three']>5]
          one  two  three  four
Colorado    4    5      6     7
Utah        8    9     10    11
New York   12   13     14    15
>>> data<5
            one    two  three   four
Ohio       True   True   True   True
Colorado   True  False  False  False
Utah      False  False  False  False
New York  False  False  False  False
>>> data[data < 5]=0
>>> data
          one  two  three  four
Ohio        0    0      0     0
Colorado    0    5      6     7
Utah        8    9     10    11
New York   12   13     14    15
>>> data.ix['Colorado', ['two', 'three']]
two      5
three    6
Name: Colorado, dtype: int32
>>> data.ix[['Colorado', 'Utah'], [3, 0, 1]]
          four  one  two
Colorado     7    0    5
Utah        11    8    9
>>> data.ix[2]
one       8
two       9
three    10
four     11
Name: Utah, dtype: int32
>>> data.ix[:'Utah', 'two']
Ohio        0
Colorado    5
Utah        9
Name: two, dtype: int32
>>> data.ix[data.three > 5, :3]
          one  two  three
Colorado    0    5      6
Utah        8    9     10
New York   12   13     14
>>> arr = np.arange(12.).reshape((3, 4))
>>> arr
array([[  0.,   1.,   2.,   3.],
       [  4.,   5.,   6.,   7.],
       [  8.,   9.,  10.,  11.]])
>>> arr[0]
array([ 0.,  1.,  2.,  3.])
>>> arr[1]
array([ 4.,  5.,  6.,  7.])
>>> arr  - arr[0]
array([[ 0.,  0.,  0.,  0.],
       [ 4.,  4.,  4.,  4.],
       [ 8.,  8.,  8.,  8.]])
>>> frame = DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),index=['Utah', 'Ohio', 'Texas', 'Oregon'])
>>> frame
        b   d   e
Utah    0   1   2
Ohio    3   4   5
Texas   6   7   8
Oregon  9  10  11
>>> series = frame.ix[0]
>>> series
b    0
d    1
e    2
Name: Utah, dtype: float64
>>> frame
        b   d   e
Utah    0   1   2
Ohio    3   4   5
Texas   6   7   8
Oregon  9  10  11
>>> series
b    0
d    1
e    2
Name: Utah, dtype: float64
>>> series2 = Series(range(3), index=['b', 'e', 'f'])
>>> series2
b    0
e    1
f    2
dtype: int32
>>> frame + series2
        b   d   e   f
Utah    0 NaN   3 NaN
Ohio    3 NaN   6 NaN
Texas   6 NaN   9 NaN
Oregon  9 NaN  12 NaN
>>> series3 = frame['d']
>>> frame
        b   d   e
Utah    0   1   2
Ohio    3   4   5
Texas   6   7   8
Oregon  9  10  11
>>> series3
Utah       1
Ohio       4
Texas      7
Oregon    10
Name: d, dtype: float64
>>> series = frame.ix[0]
>>> frame
        b   d   e
Utah    0   1   2
Ohio    3   4   5
Texas   6   7   8
Oregon  9  10  11
>>> frame -series
        b  d  e
Utah    0  0  0
Ohio    3  3  3
Texas   6  6  6
Oregon  9  9  9
>>> series
b    0
d    1
e    2
Name: Utah, dtype: float64
>>> frame = DataFrame(np.random.randn(4, 3), columns=list('bde'),index=['Utah', 'Ohio', 'Texas', 'Oregon'])
>>> frame
               b         d         e
Utah   -1.300033  1.699163 -0.258011
Ohio    0.141228 -0.487740 -1.296928
Texas  -1.591358  0.546294  2.206108
Oregon -1.474198 -0.538526 -0.561943
>>> frame.Utah
Traceback (most recent call last):
  File "<pyshell#120>", line 1, in <module>
    frame.Utah
  File "C:\Python34\lib\site-packages\pandas\core\generic.py", line 2360, in __getattr__
    (type(self).__name__, name))
AttributeError: 'DataFrame' object has no attribute 'Utah'
>>> frame.ix['Utah']
b   -1.300033
d    1.699163
e   -0.258011
Name: Utah, dtype: float64
>>> frame.values
array([[-1.30003315,  1.69916313, -0.25801116],
       [ 0.14122759, -0.48774038, -1.29692765],
       [-1.59135803,  0.54629367,  2.20610847],
       [-1.47419801, -0.53852647, -0.56194325]])
>>> frame['b']
Utah     -1.300033
Ohio      0.141228
Texas    -1.591358
Oregon   -1.474198
Name: b, dtype: float64
>>> frame.ix["Utah"]['b']
-1.300033154281298
>>> np.abs(frame)
               b         d         e
Utah    1.300033  1.699163  0.258011
Ohio    0.141228  0.487740  1.296928
Texas   1.591358  0.546294  2.206108
Oregon  1.474198  0.538526  0.561943
>>> f = lambda x: x.max() - x.min()
>>> frame.apply(f)
b    1.732586
d    2.237690
e    3.503036
dtype: float64
>>> f(1)
Traceback (most recent call last):
  File "<pyshell#128>", line 1, in <module>
    f(1)
  File "<pyshell#126>", line 1, in <lambda>
    f = lambda x: x.max() - x.min()
AttributeError: 'int' object has no attribute 'max'
>>> f(2)
Traceback (most recent call last):
  File "<pyshell#129>", line 1, in <module>
    f(2)
  File "<pyshell#126>", line 1, in <lambda>
    f = lambda x: x.max() - x.min()
AttributeError: 'int' object has no attribute 'max'
>>> f([2,1])
Traceback (most recent call last):
  File "<pyshell#130>", line 1, in <module>
    f([2,1])
  File "<pyshell#126>", line 1, in <lambda>
    f = lambda x: x.max() - x.min()
AttributeError: 'list' object has no attribute 'max'
>>> frame['b'].max()
0.14122758915656891
>>> frame['b'].min()
-1.5913580316809379
>>> frame
               b         d         e
Utah   -1.300033  1.699163 -0.258011
Ohio    0.141228 -0.487740 -1.296928
Texas  -1.591358  0.546294  2.206108
Oregon -1.474198 -0.538526 -0.561943
>>> frame.apply(f)
b    1.732586
d    2.237690
e    3.503036
dtype: float64
>>> frame['b'].max()-frame['b'].min()
1.7325856208375068
>>> def f(x):
	return Series([x.min(), x.max()], index=['min', 'max'])

>>> frame.apply(f)
            b         d         e
min -1.591358 -0.538526 -1.296928
max  0.141228  1.699163  2.206108
>>> format = lambda x: '%.2f' % x
>>> frame.applymap(format)
            b      d      e
Utah    -1.30   1.70  -0.26
Ohio     0.14  -0.49  -1.30
Texas   -1.59   0.55   2.21
Oregon  -1.47  -0.54  -0.56
>>> frame['e'].map(format)
Utah      -0.26
Ohio      -1.30
Texas      2.21
Oregon    -0.56
Name: e, dtype: object
>>> obj = Series(range(4), index=['d', 'a', 'b', 'c'])
>>> obj.sort_index()
a    1
b    2
c    3
d    0
dtype: int32
>>> 
KeyboardInterrupt
>>> frame = DataFrame(np.arange(8).reshape((2, 4)), index=['three', 'one'],
columns=['d', 'a', 'b', 'c'])
>>> frame
       d  a  b  c
three  0  1  2  3
one    4  5  6  7
>>> frame.sort_index()
       d  a  b  c
one    4  5  6  7
three  0  1  2  3
>>> frame.sort_index(axis=1)
       a  b  c  d
three  1  2  3  0
one    5  6  7  4
>>> frame.sort_index(axis=1,ascending=False)
       d  c  b  a
three  0  3  2  1
one    4  7  6  5
>>> obj = Series([4, 7, -3, 2])
>>> obj.order()

Warning (from warnings module):
  File "__main__", line 1
FutureWarning: order is deprecated, use sort_values(...)
2   -3
3    2
0    4
1    7
dtype: int64
>>> df = DataFrame([[1.4, np.nan], [7.1, -4.5],
[np.nan, np.nan], [0.75, -1.3]],
index=['a', 'b', 'c', 'd'],
columns=['one', 'two'])
>>> df
    one  two
a  1.40  NaN
b  7.10 -4.5
c   NaN  NaN
d  0.75 -1.3
>>> df.sum()
one    9.25
two   -5.80
dtype: float64
>>> df.sum(axis=1)
a    1.40
b    2.60
c     NaN
d   -0.55
dtype: float64
>>> df.sum(axis=1,skipna=False)
a     NaN
b    2.60
c     NaN
d   -0.55
dtype: float64
>>> df.idxmax()
one    b
two    d
dtype: object
>>> df.cumsum()
    one  two
a  1.40  NaN
b  8.50 -4.5
c   NaN  NaN
d  9.25 -5.8
>>> df.describe()
            one       two
count  3.000000  2.000000
mean   3.083333 -2.900000
std    3.493685  2.262742
min    0.750000 -4.500000
25%    1.075000 -3.700000
50%    1.400000 -2.900000
75%    4.250000 -2.100000
max    7.100000 -1.300000
>>> obj = Series(['a', 'a', 'b', 'c'] * 4)
>>> obj.describe()
count     16
unique     3
top        a
freq       8
dtype: object
>>> import pandas.io.data as web

Warning (from warnings module):
  File "C:\Python34\lib\site-packages\pandas\io\data.py", line 33
    FutureWarning)
FutureWarning: 
The pandas.io.data module is moved to a separate package (pandas-datareader) and will be removed from pandas in a future version.
After installing the pandas-datareader package (https://github.com/pydata/pandas-datareader), you can change the import ``from pandas.io import data, wb`` to ``from pandas_datareader import data, wb``.
>>> all_data = {}
>>> for ticker in ['AAPL', 'IBM', 'MSFT', 'GOOG']:
	all_data[ticker] = web.get_data_yahoo(ticker, '1/1/2000', '1/1/2010')

	
>>> price = DataFrame({tic: data['Adj Close']
for tic, data in all_data.iteritems()})
Traceback (most recent call last):
  File "<pyshell#168>", line 2, in <module>
    for tic, data in all_data.iteritems()})
AttributeError: 'dict' object has no attribute 'iteritems'
>>> price = DataFrame({tic: data['Adj Close']for tic, data in all_data.iteritems()})
Traceback (most recent call last):
  File "<pyshell#169>", line 1, in <module>
    price = DataFrame({tic: data['Adj Close']for tic, data in all_data.iteritems()})
AttributeError: 'dict' object has no attribute 'iteritems'
>>> all_data
{'GOOG':                   Open        High         Low       Close    Volume  \
Date                                                                   
2004-08-19  100.000168  104.060182   95.960165  100.340176  44871300   
2004-08-20  101.010175  109.080187  100.500174  108.310183  22942800   
2004-08-23  110.750191  113.480193  109.050183  109.400185  18342800   
2004-08-24  111.240189  111.600192  103.570177  104.870176  15319700   
2004-08-25  104.960181  108.000187  103.880180  106.000184   9232100   
2004-08-26  104.950180  107.950188  104.660179  107.910182   7128600   
2004-08-27  108.100185  108.620186  105.690180  106.150181   6241200   
2004-08-30  105.280178  105.490184  102.010172  102.010172   5221400   
2004-08-31  102.300173  103.710180  102.160177  102.370175   4941200   
2004-09-01  102.700174  102.970180   99.670169  100.250171   9181600   
2004-09-02   99.190173  102.370175   98.940170  101.510173  15190400   
2004-09-03  100.950174  101.740174   99.320168  100.010169   5176800   
2004-09-07  101.010175  102.000178   99.610169  101.580175   5875200   
2004-09-08  100.740176  103.030180  100.500174  102.300173   5009200   
2004-09-09  102.530174  102.710175  101.000173  102.310174   4080900   
2004-09-10  101.600178  106.560183  101.300176  105.330177   8740200   
2004-09-13  106.630185  108.410189  106.460185  107.500188   7881300   
2004-09-14  107.450181  112.000192  106.790184  111.490192  10880300   
2004-09-15  110.560189  114.230195  110.200186  112.000192  10763900   
2004-09-16  112.340192  115.800201  111.650191  113.970198   9310200   
2004-09-17  114.420198  117.490200  113.550195  117.490200   9517400   
2004-09-20  116.950204  121.600205  116.770202  119.360208  10679200   
2004-09-21  119.810208  120.420206  117.510203  117.840202   7263000   
2004-09-22  117.400203  119.670204  116.810200  118.380206   7617100   
2004-09-23  118.840207  122.630207  117.020198  120.820207   8576100   
2004-09-24  120.940208  124.100214  119.760209  119.830203   9166700   
2004-09-27  119.560205  120.880207  117.800204  118.260205   7099600   
2004-09-28  121.300211  127.400217  120.210209  126.860221  17009400   
2004-09-29  126.700214  135.020238  126.230220  131.080225  30661400   
2004-09-30  129.900219  132.300222  129.000219  129.600224  13823300   
...                ...         ...         ...         ...       ...   
2009-11-18  576.650986  578.781014  572.071009  576.650986   3110700   
2009-11-19  573.770964  574.001010  570.000959  572.991012   4352200   
2009-11-20  569.500983  571.600992  569.401000  569.960954   4027400   
2009-11-23  576.490965  586.601001  575.860987  582.350992   5114000   
2009-11-24  582.521000  584.290979  576.541017  583.091001   3222400   
2009-11-25  586.411021  587.061033  582.691008  585.740976   2933300   
2009-11-27  572.000985  582.461022  570.970952  579.760994   2779500   
2009-11-30  580.631004  583.670987  577.111018  583.001004   3463000   
2009-12-01  588.131009  591.220983  583.001004  589.871030   4657900   
2009-12-02  591.000984  593.010996  586.220980  587.511017   3338800   
2009-12-03  589.041025  591.451030  585.001029  585.740976   2868000   
2009-12-04  593.021043  594.831028  579.181007  585.011015   5046000   
2009-12-07  584.211030  588.691024  581.000978  586.250999   3284500   
2009-12-08  583.500979  590.661030  582.000991  587.050985   3059300   
2009-12-09  587.501031  589.330988  583.580990  589.020992   3575200   
2009-12-10  590.441031  594.711011  590.411011  591.501021   3349000   
2009-12-11  594.680992  594.751017  587.731016  590.510994   3452800   
2009-12-14  595.351037  597.310996  592.611003  595.730996   3841100   
2009-12-15  593.301020  596.381008  590.990998  593.140998   4577800   
2009-12-16  598.601033  600.371012  596.641012  597.761042   5639800   
2009-12-17  596.441047  597.641025  593.760990  593.941045   5297300   
2009-12-18  596.031006  598.931001  595.001035  596.421013   7089400   
2009-12-21  597.611006  599.841017  595.671019  598.681044   5161600   
2009-12-22  601.341005  601.501027  598.851051  601.121006   3775600   
2009-12-23  603.501053  612.871081  602.851041  611.681027   4160800   
2009-12-24  612.931058  619.521047  612.271061  618.481090   1723800   
2009-12-28  621.661061  625.991080  618.481090  622.871087   3408400   
2009-12-29  624.741049  624.841093  618.291049  619.401092   2860200   
2009-12-30  618.501062  622.731037  618.011072  622.731037   2942100   
2009-12-31  624.751096  625.401047  619.981079  619.981079   2448700   

             Adj Close  
Date                    
2004-08-19   50.119968  
2004-08-20   54.100990  
2004-08-23   54.645447  
2004-08-24   52.382705  
2004-08-25   52.947145  
2004-08-26   53.901190  
2004-08-27   53.022069  
2004-08-30   50.954132  
2004-08-31   51.133953  
2004-09-01   50.075011  
2004-09-02   50.704382  
2004-09-03   49.955130  
2004-09-07   50.739348  
2004-09-08   51.098988  
2004-09-09   51.103983  
2004-09-10   52.612476  
2004-09-13   53.696398  
2004-09-14   55.689407  
2004-09-15   55.944152  
2004-09-16   56.928171  
2004-09-17   58.686414  
2004-09-20   59.620484  
2004-09-21   58.861240  
2004-09-22   59.130972  
2004-09-23   60.349754  
2004-09-24   59.855246  
2004-09-27   59.071031  
2004-09-28   63.366744  
2004-09-29   65.474638  
2004-09-30   64.735377  
...                ...  
2009-11-18  288.037456  
2009-11-19  286.209296  
2009-11-20  284.695781  
2009-11-23  290.884611  
2009-11-24  291.254246  
2009-11-25  292.577910  
2009-11-27  289.590906  
2009-11-30  291.209293  
2009-12-01  294.640874  
2009-12-02  293.462046  
2009-12-03  292.577910  
2009-12-04  292.213294  
2009-12-07  292.832667  
2009-12-08  293.232260  
2009-12-09  294.216280  
2009-12-10  295.455055  
2009-12-11  294.960537  
2009-12-14  297.567930  
2009-12-15  296.274225  
2009-12-16  298.581939  
2009-12-17  296.673849  
2009-12-18  297.912594  
2009-12-21  299.041480  
2009-12-22  300.260243  
2009-12-23  305.534978  
2009-12-24  308.931613  
2009-12-28  311.124419  
2009-12-29  309.391155  
2009-12-30  311.054464  
2009-12-31  309.680858  

[1353 rows x 6 columns], 'IBM':                   Open        High         Low       Close    Volume  \
Date                                                                   
2000-01-03  112.437500  116.000000  111.875000  116.000000  10347700   
2000-01-04  114.000000  114.500000  110.875000  112.062500   8227800   
2000-01-05  112.937500  119.750000  112.125000  116.000000  12733200   
2000-01-06  118.000000  118.937500  113.500000  114.000000   7971900   
2000-01-07  117.250000  117.937500  110.625000  113.500000  11856700   
2000-01-10  117.250000  119.375000  115.375000  118.000000   8540500   
2000-01-11  117.875000  121.125000  116.625000  119.000000   7873300   
2000-01-12  119.625000  122.000000  118.250000  119.500000   6803800   
2000-01-13  119.937500  121.000000  115.750000  118.250000   8489700   
2000-01-14  120.937500  123.312500  117.500000  119.625000  10956600   
2000-01-18  119.687500  119.750000  115.000000  115.750000   7643900   
2000-01-19  115.562500  122.000000  112.687500  119.500000   8634500   
2000-01-20  123.000000  124.750000  119.000000  119.000000  17783400   
2000-01-21  121.875000  123.000000  119.937500  121.500000   7868700   
2000-01-24  121.875000  122.875000  116.562500  121.500000   6499200   
2000-01-25  116.750000  119.500000  116.000000  119.125000   6936900   
2000-01-26  119.062500  119.937500  116.000000  116.750000   4895100   
2000-01-27  118.000000  118.437500  111.625000  113.500000   8324600   
2000-01-28  112.750000  114.187500  110.062500  111.562500   6669400   
2000-01-31  111.375000  112.812500  109.625000  112.250000   6202700   
2000-02-01  112.375000  113.437500  109.125000  110.000000   7304700   
2000-02-02  112.000000  115.812500  110.375000  113.500000   7707700   
2000-02-03  115.000000  117.500000  114.062500  117.125000   6213800   
2000-02-04  118.187500  118.437500  114.812500  115.625000   5405300   
2000-02-07  116.000000  116.875000  113.125000  114.125000   5779500   
2000-02-08  116.937500  119.000000  116.187500  118.812500   5464300   
2000-02-09  119.000000  119.750000  117.000000  117.375000   5374700   
2000-02-10  117.687500  119.125000  116.875000  119.125000   4446600   
2000-02-11  119.062500  119.437500  114.562500  115.375000   5749400   
2000-02-14  116.000000  116.375000  114.500000  116.062500   4544000   
...                ...         ...         ...         ...       ...   
2009-11-18  128.050003  128.350006  127.550003  128.149994   3970100   
2009-11-19  127.279999  127.839996  126.510002  127.540001   5308400   
2009-11-20  127.169998  127.690002  126.459999  126.959999   5354200   
2009-11-23  127.699997  128.940002  127.650002  128.199997   7003500   
2009-11-24  127.900002  128.320007  127.139999  127.930000   4816500   
2009-11-25  127.879997  128.220001  127.080002  127.279999   3967700   
2009-11-27  124.589996  126.620003  124.260002  125.699997   3319200   
2009-11-30  125.120003  126.599998  124.919998  126.349998   6302700   
2009-12-01  127.290001  128.389999  126.849998  127.940002   6578600   
2009-12-02  127.320000  128.389999  127.160004  127.209999   4597900   
2009-12-03  127.599998  128.470001  127.250000  127.550003   5760000   
2009-12-04  128.399994  128.899994  126.000000  127.250000   7068500   
2009-12-07  126.879997  127.529999  126.589996  127.040001   4144400   
2009-12-08  126.970001  127.349998  126.160004  126.800003   5351400   
2009-12-09  126.699997  128.389999  126.110001  128.389999   6071900   
2009-12-10  128.130005  129.470001  128.089996  129.339996   7077800   
2009-12-11  129.009995  129.770004  128.710007  129.679993   6597200   
2009-12-14  129.649994  129.979996  129.600006  129.929993   5201300   
2009-12-15  129.460007  129.860001  127.940002  128.490005   7862600   
2009-12-16  128.740005  129.600006  128.350006  128.710007   6372500   
2009-12-17  128.000000  128.559998  127.120003  127.400002   5909500   
2009-12-18  127.970001  128.389999  127.000000  127.910004   9106600   
2009-12-21  127.800003  128.940002  127.680000  128.649994   4772500   
2009-12-22  129.300003  129.979996  129.190002  129.929993   5535500   
2009-12-23  129.699997  130.000000  129.300003  130.000000   4127600   
2009-12-24  129.889999  130.570007  129.479996  130.570007   4265100   
2009-12-28  130.990005  132.309998  130.720001  132.309998   5800400   
2009-12-29  132.279999  132.369995  131.800003  131.850006   4184200   
2009-12-30  131.229996  132.679993  130.679993  132.570007   3867000   
2009-12-31  132.410004  132.850006  130.750000  130.899994   4223400   

             Adj Close  
Date                    
2000-01-03   89.257529  
2000-01-04   86.227774  
2000-01-05   89.257529  
2000-01-06   87.718606  
2000-01-07   87.333875  
2000-01-10   90.796451  
2000-01-11   91.565913  
2000-01-12   91.950644  
2000-01-13   90.988817  
2000-01-14   92.046826  
2000-01-18   89.065163  
2000-01-19   91.950644  
2000-01-20   91.565913  
2000-01-21   93.489567  
2000-01-24   93.489567  
2000-01-25   91.662096  
2000-01-26   89.834625  
2000-01-27   87.333875  
2000-01-28   85.843043  
2000-01-31   86.372048  
2000-02-01   84.640760  
2000-02-02   87.333875  
2000-02-03   90.123173  
2000-02-04   88.968980  
2000-02-07   87.814788  
2000-02-08   91.517866  
2000-02-09   90.410601  
2000-02-10   91.758576  
2000-02-11   88.870058  
2000-02-14   89.399620  
...                ...  
2009-11-18  109.626092  
2009-11-19  109.104273  
2009-11-20  108.608110  
2009-11-23  109.668868  
2009-11-24  109.437899  
2009-11-25  108.881854  
2009-11-27  107.530239  
2009-11-30  108.086284  
2009-12-01  109.446455  
2009-12-02  108.821972  
2009-12-03  109.112829  
2009-12-04  108.856191  
2009-12-07  108.676547  
2009-12-08  108.471241  
2009-12-09  109.831405  
2009-12-10  110.644082  
2009-12-11  110.934932  
2009-12-14  111.148795  
2009-12-15  109.916956  
2009-12-16  110.105156  
2009-12-17  108.984510  
2009-12-18  109.420792  
2009-12-21  110.053818  
2009-12-22  111.148795  
2009-12-23  111.208683  
2009-12-24  111.696296  
2009-12-28  113.184773  
2009-12-29  112.791273  
2009-12-30  113.407199  
2009-12-31  111.978584  

[2515 rows x 6 columns], 'AAPL':                   Open        High         Low       Close     Volume  \
Date                                                                    
2000-01-03  104.874997  112.499998  101.687501  111.937502  133949200   
2000-01-04  108.250001  110.625002  101.187503  102.500003  128094400   
2000-01-05  103.749998  110.562497  103.000001  103.999997  194580400   
2000-01-06  106.124999  106.999999   94.999998   94.999998  191993200   
2000-01-07   96.499999  101.000002   95.500003   99.500001  115183600   
2000-01-10  101.999998  102.249997   94.749999   97.750001  126266000   
2000-01-11   95.937503   99.374998   90.500002   92.750000  110387200   
2000-01-12   94.999998   95.500003   86.499997   87.187503  244017200   
2000-01-13   94.484299   98.749997   92.500001   96.749998  258171200   
2000-01-14   99.999999  102.249997   99.374998  100.437499   97594000   
2000-01-18  101.000002  106.000003  100.437499  103.937499  114794400   
2000-01-19  105.625001  108.749999  103.375003  106.562499  149410800   
2000-01-20  115.500000  121.500004  113.499994  113.499994  457783200   
2000-01-21  114.249998  114.249998  110.187502  111.312501  123981200   
2000-01-24  108.437502  112.750004  105.125003  106.250002  110219200   
2000-01-25  105.000000  113.125006  102.375000  112.250006  124286400   
2000-01-26  110.000001  114.187500  109.750002  110.187502   91789600   
2000-01-27  108.812497  112.999996  106.999999  110.000001   85036000   
2000-01-28  108.187503  110.875001  100.625000  101.625003  105837200   
2000-01-31  101.000002  103.875001   94.500000  103.749998  175420000   
2000-02-01  103.999997  105.000000   99.999999  100.249998   79508800   
2000-02-02  100.750003  102.125001   96.999997   98.812502  116048800   
2000-02-03  100.312503  104.250003  100.249998  103.312498  118798400   
2000-02-04  103.937499  110.000001  103.625002  108.000002  106330000   
2000-02-07  108.000002  114.249998  105.937498  114.062504  110266800   
2000-02-08  114.000006  116.124994  111.250003  114.875006  102160800   
2000-02-09  114.125002  117.125004  112.437500  112.624994   74841200   
2000-02-10  112.875000  113.874996  110.000001  113.499994   75745600   
2000-02-11  113.625004  114.125002  108.250001  108.749999   53062800   
2000-02-14  109.312502  115.875002  108.625003  115.812504   91884800   
...                ...         ...         ...         ...        ...   
2009-11-18  206.540001  206.999998  203.999996  205.960001   93580200   
2009-11-19  204.609997  204.609997  199.799994  200.509996  135581600   
2009-11-20  199.150005  200.389994  197.760000  199.919996  101666600   
2009-11-23  203.000000  206.000002  202.949999  205.879999  118724200   
2009-11-24  205.330000  205.879999  202.899998  204.440006   79609600   
2009-11-25  205.400002  205.649994  203.760004  204.190001   71613500   
2009-11-27  199.219994  202.959999  198.370001  200.589998   73814300   
2009-11-30  201.109997  201.679996  198.769997  199.909996  106214500   
2009-12-01  202.239996  202.769995  196.830006  196.969995  116440800   
2009-12-02  198.960001  201.420004  195.749994  196.230005  178815000   
2009-12-03  197.420006  198.980001  196.270006  196.479998  112179900   
2009-12-04  199.700005  199.879995  190.280003  193.320005  206721200   
2009-12-07  193.320005  193.770002  188.680006  188.949999  178689700   
2009-12-08  189.359995  192.349997  188.700006  189.870007  172599700   
2009-12-09  191.279999  198.159996  190.310003  197.800001  171195500   
2009-12-10  199.500000  199.700005  196.120003  196.429996  122417400   
2009-12-11  197.780001  198.000006  193.429995  194.669996  107443700   
2009-12-14  195.369999  197.430006  192.560001  196.979996  123947600   
2009-12-15  195.829996  197.509995  193.270004  194.169998  104864900   
2009-12-16  195.100006  196.499998  194.549994  195.030005   88246200   
2009-12-17  194.260000  195.000004  191.000006  191.859999   97209700   
2009-12-18  193.170002  195.500002  192.600002  195.430000  152192600   
2009-12-21  196.050001  199.750006  195.670006  198.229998  152976600   
2009-12-22  199.439999  200.850004  198.659994  200.360006   87378900   
2009-12-23  201.199999  202.379999  200.810003  202.100006   86381400   
2009-12-24  203.549999  209.349998  203.349995  209.040005  125222300   
2009-12-28  211.719999  213.949997  209.610004  211.609997  161141400   
2009-12-29  212.629993  212.719995  208.729998  209.100006  111301400   
2009-12-30  208.830000  212.000006  208.310001  211.639997  103021100   
2009-12-31  213.130005  213.349997  210.559999  210.730003   88102700   

            Adj Close  
Date                   
2000-01-03   3.641362  
2000-01-04   3.334358  
2000-01-05   3.383153  
2000-01-06   3.090380  
2000-01-07   3.236767  
2000-01-10   3.179838  
2000-01-11   3.017187  
2000-01-12   2.836237  
2000-01-13   3.147308  
2000-01-14   3.267264  
2000-01-18   3.381120  
2000-01-19   3.466512  
2000-01-20   3.692191  
2000-01-21   3.621031  
2000-01-24   3.456346  
2000-01-25   3.651528  
2000-01-26   3.584434  
2000-01-27   3.578335  
2000-01-28   3.305893  
2000-01-31   3.375020  
2000-02-01   3.261164  
2000-02-02   3.214402  
2000-02-03   3.360788  
2000-02-04   3.513274  
2000-02-07   3.710489  
2000-02-08   3.736920  
2000-02-09   3.663727  
2000-02-10   3.692191  
2000-02-11   3.537672  
2000-02-14   3.767417  
...               ...  
2009-11-18  26.799776  
2009-11-19  26.090614  
2009-11-20  26.013843  
2009-11-23  26.789366  
2009-11-24  26.601992  
2009-11-25  26.569461  
2009-11-27  26.101024  
2009-11-30  26.012542  
2009-12-01  25.629985  
2009-12-02  25.533697  
2009-12-03  25.566226  
2009-12-04  25.155044  
2009-12-07  24.586413  
2009-12-08  24.706125  
2009-12-09  25.737986  
2009-12-10  25.559720  
2009-12-11  25.330706  
2009-12-14  25.631286  
2009-12-15  25.265646  
2009-12-16  25.377551  
2009-12-17  24.965066  
2009-12-18  25.429599  
2009-12-21  25.793938  
2009-12-22  26.071098  
2009-12-23  26.297508  
2009-12-24  27.200550  
2009-12-28  27.534960  
2009-12-29  27.208357  
2009-12-30  27.538864  
2009-12-31  27.420455  

[2515 rows x 6 columns], 'MSFT':                   Open        High         Low       Close     Volume  \
Date                                                                    
2000-01-03  117.375000  118.625000  112.000000  116.562500   53228400   
2000-01-04  113.562500  117.125000  112.250000  112.625000   54119000   
2000-01-05  111.125000  116.375000  109.375000  113.812500   64059600   
2000-01-06  112.187500  113.875000  108.375000  110.000000   54976600   
2000-01-07  108.625000  112.250000  107.312500  111.437500   62013600   
2000-01-10  113.437500  113.687500  111.375000  112.250000   44963600   
2000-01-11  111.500000  114.250000  108.687500  109.375000   46743600   
2000-01-12  108.500000  108.875000  104.437500  105.812500   66532400   
2000-01-13  104.375000  108.625000  101.500000  107.812500   83144000   
2000-01-14  107.187500  113.937500  105.750000  112.250000   73416400   
2000-01-18  111.812500  116.500000  111.750000  115.312500   81483600   
2000-01-19  110.500000  111.500000  106.000000  107.000000   97568200   
2000-01-20  107.062500  109.687500  105.875000  106.000000   56349800   
2000-01-21  107.000000  107.250000  103.250000  103.750000   68416200   
2000-01-24  103.796799  105.687500  100.812500  101.250000   63597600   
2000-01-25  101.000000  103.875000   99.562500  102.812500   59823200   
2000-01-26  102.437500  103.500000   99.125000   99.375000   49365000   
2000-01-27   99.890602  101.187500   97.250000   98.750000   63654800   
2000-01-28   98.125000  100.250000   97.250000   98.250000   58225400   
2000-01-31   97.625000   98.187500   94.875000   97.875000   73194200   
2000-02-01   98.500000  103.250000   97.687500  102.937500   70196600   
2000-02-02  102.437500  103.937500  100.500000  100.812500   49915600   
2000-02-03  102.062500  104.187500  100.125000  103.625000   49186000   
2000-02-04  104.375000  108.000000  104.140602  106.562500   55365400   
2000-02-07  106.812500  106.875000  104.250000  106.625000   40005800   
2000-02-08  106.437500  110.000000  106.437500  109.937500   56229000   
2000-02-09  109.437500  109.437500  103.875000  104.000000   55090000   
2000-02-10  103.890602  106.562500  102.500000  106.000000   54527800   
2000-02-11  104.875000  104.875000   99.125000   99.937500  115559000   
2000-02-14  101.234299  101.750000   99.062500   99.625000   81028600   
...                ...         ...         ...         ...        ...   
2009-11-18   30.000000   30.139999   29.809999   30.110001   59431200   
2009-11-19   29.990000   30.000000   29.700001   29.780001   51967700   
2009-11-20   29.660000   29.770000   29.430000   29.620001   42647100   
2009-11-23   29.840000   30.010000   29.700001   29.940001   41832700   
2009-11-24   29.950001   29.990000   29.750000   29.910000   37341400   
2009-11-25   29.809999   29.860001   29.580000   29.790001   32033500   
2009-11-27   29.110001   29.389999   28.750000   29.219999   29357900   
2009-11-30   29.150000   29.450001   29.000000   29.410000   44172000   
2009-12-01   29.520000   30.049999   29.410000   30.010000   49904200   
2009-12-02   29.900000   29.990000   29.650000   29.780001   36308600   
2009-12-03   29.840000   30.200001   29.760000   29.830000   43095200   
2009-12-04   30.049999   30.370001   29.830000   29.980000   58810700   
2009-12-07   29.780001   30.080000   29.680000   29.790001   38082700   
2009-12-08   29.520000   29.740000   29.379999   29.570000   37402200   
2009-12-09   29.469999   29.809999   29.250000   29.709999   44713300   
2009-12-10   29.709999   29.959999   29.660000   29.870001   45940200   
2009-12-11   29.969999   30.000000   29.790001   29.850000   43744200   
2009-12-14   29.910000   30.160000   29.900000   30.110001   34651200   
2009-12-15   29.889999   30.209999   29.879999   30.020000   49473200   
2009-12-16   30.070000   30.410000   30.040001   30.100000   55737800   
2009-12-17   29.950001   29.959999   29.570000   29.600000   43691200   
2009-12-18   29.840000   30.450001   29.799999   30.360001   94118000   
2009-12-21   30.400000   30.840000   30.370001   30.520000   40129100   
2009-12-22   30.600000   30.930000   30.540001   30.820000   36321000   
2009-12-23   30.709999   30.950001   30.690001   30.920000   28362700   
2009-12-24   30.879999   31.000000   30.760000   31.000000   11083900   
2009-12-28   31.000000   31.180000   30.889999   31.170000   25384000   
2009-12-29   31.350000   31.500000   31.230000   31.389999   29716200   
2009-12-30   31.150000   31.290001   30.799999   30.959999   42006200   
2009-12-31   30.980000   30.990000   30.480000   30.480000   31929700   

            Adj Close  
Date                   
2000-01-03  39.840438  
2000-01-04  38.494621  
2000-01-05  38.900502  
2000-01-06  37.597410  
2000-01-07  38.088740  
2000-01-10  38.366448  
2000-01-11  37.383789  
2000-01-12  36.166145  
2000-01-13  36.849735  
2000-01-14  38.366448  
2000-01-18  39.413194  
2000-01-19  36.572026  
2000-01-20  36.230232  
2000-01-21  35.461194  
2000-01-24  34.606707  
2000-01-25  35.140761  
2000-01-26  33.965842  
2000-01-27  33.752221  
2000-01-28  33.581323  
2000-01-31  33.453150  
2000-02-01  35.183486  
2000-02-02  34.457172  
2000-02-03  35.418470  
2000-02-04  36.422491  
2000-02-07  36.443853  
2000-02-08  37.576048  
2000-02-09  35.546643  
2000-02-10  36.230232  
2000-02-11  34.158102  
2000-02-14  34.051291  
...               ...  
2009-11-18  25.181595  
2009-11-19  24.905610  
2009-11-20  24.771799  
2009-11-23  25.039421  
2009-11-24  25.014331  
2009-11-25  24.913973  
2009-11-27  24.437269  
2009-11-30  24.596171  
2009-12-01  25.097963  
2009-12-02  24.905610  
2009-12-03  24.947425  
2009-12-04  25.072873  
2009-12-07  24.913973  
2009-12-08  24.729982  
2009-12-09  24.847066  
2009-12-10  24.980879  
2009-12-11  24.964152  
2009-12-14  25.181595  
2009-12-15  25.106326  
2009-12-16  25.173232  
2009-12-17  24.755072  
2009-12-18  25.390675  
2009-12-21  25.524486  
2009-12-22  25.775382  
2009-12-23  25.859014  
2009-12-24  25.925919  
2009-12-28  26.068094  
2009-12-29  26.252084  
2009-12-30  25.892466  
2009-12-31  25.491033  

[2515 rows x 6 columns]}
>>> price = DataFrame({tic: data['Adj Close']
for tic, data in all_data.iteritems()})
Traceback (most recent call last):
  File "<pyshell#171>", line 2, in <module>
    for tic, data in all_data.iteritems()})
AttributeError: 'dict' object has no attribute 'iteritems'
>>> price = DataFrame({tic: data['Adj Close']for tic, data in all_data.iteritems()})
Traceback (most recent call last):
  File "<pyshell#172>", line 1, in <module>
    price = DataFrame({tic: data['Adj Close']for tic, data in all_data.iteritems()})
AttributeError: 'dict' object has no attribute 'iteritems'
>>> data = DataFrame({'Qu1': [1, 3, 4, 3, 4],'Qu2': [2, 3, 1, 2, 3],'Qu3': [1, 5, 2, 4, 4]})
>>> data
   Qu1  Qu2  Qu3
0    1    2    1
1    3    3    5
2    4    1    2
3    3    2    4
4    4    3    4
>>> result = data.apply(pd.value_counts).fillna(0)
>>> result
   Qu1  Qu2  Qu3
1    1    1    1
2    0    2    1
3    2    2    0
4    2    0    2
5    0    0    1
>>> string_data = Series(['aardvark', 'artichoke', np.nan, 'avocado'])
>>> string_data
0     aardvark
1    artichoke
2          NaN
3      avocado
dtype: object
>>> string_data[0] = None
>>> string_data
0         None
1    artichoke
2          NaN
3      avocado
dtype: object
>>> string_data.isnull()
0     True
1    False
2     True
3    False
dtype: bool
>>> from numpy import nan as NA
>>> data = Series([1, NA, 3.5, NA, 7])
>>> data.dropna()
0    1.0
2    3.5
4    7.0
dtype: float64
>>> data
0    1.0
1    NaN
2    3.5
3    NaN
4    7.0
dtype: float64
>>> data[data.notnull()]
0    1.0
2    3.5
4    7.0
dtype: float64
>>> data = DataFrame([[1., 6.5, 3.], [1., NA, NA],[NA, NA, NA], [NA, 6.5, 3.]])
>>> data
    0    1   2
0   1  6.5   3
1   1  NaN NaN
2 NaN  NaN NaN
3 NaN  6.5   3
>>> cleaned = data.dropna()
>>> data
    0    1   2
0   1  6.5   3
1   1  NaN NaN
2 NaN  NaN NaN
3 NaN  6.5   3
>>> cleaned
   0    1  2
0  1  6.5  3
>>> data.dropna(how='all')
    0    1   2
0   1  6.5   3
1   1  NaN NaN
3 NaN  6.5   3
>>> data[4] = NA
>>> data
    0    1   2   4
0   1  6.5   3 NaN
1   1  NaN NaN NaN
2 NaN  NaN NaN NaN
3 NaN  6.5   3 NaN
>>> data.dropna(axis=1,how='all')
    0    1   2
0   1  6.5   3
1   1  NaN NaN
2 NaN  NaN NaN
3 NaN  6.5   3
>>> 
